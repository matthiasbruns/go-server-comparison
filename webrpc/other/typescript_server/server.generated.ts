/* eslint-disable */
// hello-world v0.1.0 4b39792dcfb717dadcad792cc6d0bad614978b92
// --
// Code generated by webrpc-gen@v0.19.3 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=schema.ridl -target=typescript -server -out=other/typescript_server/server.generated.ts

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.1.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "4b39792dcfb717dadcad792cc6d0bad614978b92"

//
// Types
//


export enum Gender {
  MALE = 'MALE',
  FEMALE = 'FEMALE',
  OTHER = 'OTHER'
}

export interface Address {
  street: string
  postalCode?: string
  city: string
  country: string
}

export interface User {
  name: string
  age: number
  gender: Gender
  address?: Address
}

export interface HelloWorldV1 {
  simple(headers?: object, signal?: AbortSignal): Promise<SimpleReturn>
  greet(args: GreetArgs, headers?: object, signal?: AbortSignal): Promise<GreetReturn>
}

export interface SimpleArgs {
}

export interface SimpleReturn {
  message: string  
}
export interface GreetArgs {
  user: User
}

export interface GreetReturn {
  message: string  
}


  
//
// Server
//

export class WebRPCError extends Error {
    statusCode?: number

    constructor(msg: string = "error", statusCode?: number) {
        super("webrpc error: " + msg);

        Object.setPrototypeOf(this, WebRPCError.prototype);

        this.statusCode = statusCode;
    }
}

import express from 'express'

        export type HelloWorldV1Service = {
            
                Simple: (args: SimpleArgs) => SimpleReturn | Promise<SimpleReturn>
            
                Greet: (args: GreetArgs) => GreetReturn | Promise<GreetReturn>
            
        }

        export const createHelloWorldV1App = (serviceImplementation: HelloWorldV1Service) => {
            const app = express();

            app.use(express.json())

            app.post('/*', async (req, res) => {
                const requestPath = req.baseUrl + req.path

                if (!req.body) {
                    res.status(400).send("webrpc error: missing body");

                    return
                }

                switch(requestPath) {
                    

                    case "/rpc/HelloWorldV1/Simple": {                        
                        try {
                            

                            const response = await serviceImplementation["Simple"](req.body);

                            
                                if (!("message" in response)) {
                                    throw new WebRPCError("internal", 500);
                                }
                            

                            res.status(200).json(response);
                        } catch (err) {
                            if (err instanceof WebRPCError) {
                                const statusCode = err.statusCode || 400
                                const message = err.message

                                res.status(statusCode).json({
                                    msg: message,
                                    status: statusCode,
                                    code: ""
                                });

                                return
                            }

                            if (err.message) {
                                res.status(400).send(err.message);

                                return;
                            }

                            res.status(400).end();
                        }
                    }

                    return;
                    

                    case "/rpc/HelloWorldV1/Greet": {                        
                        try {
                            
                                    if (!("user" in req.body)) {
                                        throw new WebRPCError("Missing Argument `user`")
                                    }
                                if ("user" in req.body && !validateType(req.body["user"], "User")) {
                                    throw new WebRPCError("Invalid Argument: user")
                                }
                            

                            const response = await serviceImplementation["Greet"](req.body);

                            
                                if (!("message" in response)) {
                                    throw new WebRPCError("internal", 500);
                                }
                            

                            res.status(200).json(response);
                        } catch (err) {
                            if (err instanceof WebRPCError) {
                                const statusCode = err.statusCode || 400
                                const message = err.message

                                res.status(statusCode).json({
                                    msg: message,
                                    status: statusCode,
                                    code: ""
                                });

                                return
                            }

                            if (err.message) {
                                res.status(400).send(err.message);

                                return;
                            }

                            res.status(400).end();
                        }
                    }

                    return;
                    

                    default: {
                        res.status(404).end()
                    }
                }
            });

            return app;
        };

  

const JS_TYPES = [
    "bigint",
    "boolean",
    "function",
    "number",
    "object",
    "string",
    "symbol",
    "undefined"
]


    const validateGender = (value: any) => {
        
            
                if (!("MALE" in value) || !validateType(value["MALE"], "string")) {
                    return false
                }
            
        
            
                if (!("FEMALE" in value) || !validateType(value["FEMALE"], "string")) {
                    return false
                }
            
        
            
                if (!("OTHER" in value) || !validateType(value["OTHER"], "string")) {
                    return false
                }
            
        

        return true
    }

    const validateAddress = (value: any) => {
        
            
                if (!("street" in value) || !validateType(value["street"], "string")) {
                    return false
                }
            
        
            
                if ("postalCode" in value && !validateType(value["postalCode"], "string")) {
                    return false
                }
            
        
            
                if (!("city" in value) || !validateType(value["city"], "string")) {
                    return false
                }
            
        
            
                if (!("country" in value) || !validateType(value["country"], "string")) {
                    return false
                }
            
        

        return true
    }

    const validateUser = (value: any) => {
        
            
                if (!("name" in value) || !validateType(value["name"], "string")) {
                    return false
                }
            
        
            
                if (!("age" in value) || !validateType(value["age"], "number")) {
                    return false
                }
            
        
            
                if (!("gender" in value) || !validateType(value["gender"], "Gender")) {
                    return false
                }
            
        
            
                if ("address" in value && !validateType(value["address"], "Address")) {
                    return false
                }
            
        

        return true
    }


const TYPE_VALIDATORS: { [type: string]: (value: any) => boolean } = {
    
        Gender: validateGender,
    
        Address: validateAddress,
    
        User: validateUser,
    
}

const validateType = (value: any, type: string) => {
    if (JS_TYPES.indexOf(type) > -1) {
        return typeof value === type;
    }

    const validator = TYPE_VALIDATORS[type];

    if (!validator) {
        return false;
    }

    return validator(value);
}

